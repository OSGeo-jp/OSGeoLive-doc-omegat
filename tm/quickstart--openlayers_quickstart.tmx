<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE tmx SYSTEM "tmx14.dtd">
<tmx version="1.4">
  <header creationtool="Translate Toolkit" creationtoolversion="3.1.1" segtype="sentence" o-tmf="UTF-8" adminlang="en" srclang="en" datatype="PlainText"/>
  <body>
    <tu>
      <tuv xml:lang="en">
        <seg>OpenLayers Quickstart</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>OpenLayersクイックスタート</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>This Quick Start describes some basic steps required to start working with OpenLayers: creating a basic map, adding raster and vector layers and styling features.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>このクイックスタートでは、OpenLayersをはじめて使うときの基本的な手順について説明します。基本的なマップの作成、ラスタレイヤとベクタレイヤの追加、地物のスタイリングです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>OpenLayers makes it easy to put a dynamic map in any web page. It can display map tiles, vector data and markers loaded from any source. OpenLayers has been developed to further the use of geographic information of all kinds. It is completely free, Open Source JavaScript, released under the 2-clause BSD License (also known as the FreeBSD).</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>OpenLayersを使用すると、任意のWebページに動的な地図を簡単に配置できます。任意のソースから地図タイル、ベクタデータやマーカーをロードして表示可能です。OpenLayers はすべての種類の地理情報のさらなる利用のために開発されてきました。完全にフリーなオープンソース JavaScript で、2条項 BSD ライセンス (FreeBSD ライセンスとしても知られています) でリリースされています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Core concepts</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>主な概念</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Before we start working with OpenLayers it helps to understand OpenLayers core concepts:</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>OpenLayersで作業を始める前に、OpenLayersの主な概念を理解しておくとよいでしょう。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>**Map**</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>**マップ**</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The *map* is the core component of OpenLayers. For a *map* to render, a *view*, one or more *layers*, and a target container are needed.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>*マップ*はOpenLayersの主要な要素です。*マップ*をレンダリングするには、*ビュー*、1つまたは複数の*レイヤ*、およびターゲットコンテナが必要です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>**View**</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>**ビュー**</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The *view* determines how the map is rendered. It is used to set the resolution, the center location, etc. It is like a camera through which we look at the map's content.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>*ビュー*はmapのレンダリング方法を決定します。解像度や中心位置などを設定します。これはマップの内容を見るためのカメラのようなものです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>**Layers**</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>**レイヤ**</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>*Layers* can be added to the map in a stacked order. Layers can be either *raster layers* (images), or *vector layers* (points/lines/polygons).</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>*レイヤ*はスタック順にマップに追加できます。レイヤは、*ラスタレイヤ*(イメージ)または*ベクタレイヤ*(点/線分/ポリゴン)のいずれかです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>**Source**</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>**ソース**</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Each layer has a *source*, which knows how to load the layer content. In the case of *vector layers*, its source reads vector data using a *format* class (for example GeoJSON or KML) and provides the layer with a set of *features*.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>各レイヤには、レイヤコンテンツのロード方法を知っている*ソース*があります。*ベクタレイヤ*の場合、そのソースは*フォーマット*クラス(例えばGeoJSONやKML)を使ってベクタデータを読み込み、一連の*フィーチャー*をレイヤに提供します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>**Features**</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>**フィーチャー**</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>*Features* represent real world things and can be rendered using different *geometries* (like point, line or polygon) using a given *style*, which determines its look (line thinkness, fill color, etc).</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>*フィーチャー*は現実世界のものを表し、特定の*スタイル*を使用して、さまざまな*ジオメトリ*(点、線、ポリゴンなど)を使用してレンダリングできます。これにより、外観(線の思考、塗り潰し色など)が決まります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Create a basic map</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>基本マップを作成する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Create a file in e.g. /home/user/ called basic-map.html , and copy the following content into the file.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>/home/user/でbasic-map.htmlという名前のファイルを作成して、次の内容を記入します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Now try opening basic-map.html from a web browser using File-&gt;Open File. You should see the following:</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>Webブラウザから[ファイル]-&gt;[ファイルを開く]を使用して、basic-map.htmlを開いてみます。次のように表示されるはずです。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Note:</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>注意：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The code follows the best practice of loading JavaScipt code at the end of the html file.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>このコードは、JavaSciptコードをhtmlファイルの最後にロードするというベスト・プラクティスに従います。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>An OpenLayers map needs to be attached to a HTML DOM element, so we have created a ``&lt;div&gt;`` element identified by the *map* id.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>OpenLayersマップはHTML DOM要素にアタッチする必要があるため、*map*idで識別される``&lt;div&gt;``要素を作成しました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Maps are represented by the ``ol.Map`` class. We specify the DOM element to render the map into using the **target** property.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>マップは``ol.Map``クラスで表されます。**target**プロパティーを使用して、マップをレンダリングするDOM要素を指定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>OpenLayers allows map rendering using two different mechanisms: Canvas and WebGL. The default renderer is *canvas*.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>OpenLayersでは、キャンバスとWebGLという2つの異なるメカニズムを使用したマップレンダリングが可能です。既定のレンダラーは*canvas*です。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A map shows data contained within layers, so we have created a tiled layer, represented by the ``ol.layer.Tile`` class, that loads content from the OpenStreetMap project, using the ``ol.source.OSM`` source class.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>レイヤ内にマップのデータを表示するため、``ol.source.OSM``ソースクラスを使用してOpenStreetMapプロジェクトからコンテンツをロードするようにしたタイルレイヤの``ol.layer.Tile``クラスを作成しました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Finally, we set the initial position of the *camera* using the ``ol.View`` class, set the initial zoom level and center location.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>最後に、``ol.View``クラスを使用して*camera*の初期位置を設定し、初期ズームレベルと中心位置を設定します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Add raster layers</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>ラスタレイヤ追加する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The most used raster layers are the tiled layers, provided by the likes of OpenStreetMap, Stamen, Bing, etc. Tiled layers are represented by the ``ol.layer.Tile`` class and must use a source that knows how to load tiles from a given provider, like ``ol.source.OSM`` or ``ol.source.Stamen``:</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>OpenStreetMap、Stamen、Bingなどによって提供されるタイルレイヤが、最も使用されるラスタレイヤです。タイルレイヤーは``ol.layer.Tile``クラスで表され、``ol.source.OSM``または``ol.source.Stamen``のように、特定のプロバイダからタイルをロードする方法を知っているソースを使用する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Layers can be added to the map in two ways:</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>レイヤは、次の2つの方法でマップに追加できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>When constructing the ``ol.Map``, use the ``layers`` property:</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>``ol.Map``を作成する場合は、``layers``プロパティを使用します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Add them manually with the ``map.addLayer()`` method:</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>``map.addLayer()``メソッドを使って手動で追加します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Add vector layers</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>ベクタレイヤを追加する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Vector layers are represented by the ``ol.layer.Vector`` class and must use a source suitable for reading the vector format, like ``ol.source.GeoJSON``, ``ol.source.KML`` or ``ol.source.TopoJSON``.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>ベクタレイヤは``ol.layer.Vector``クラスで表され、``ol.source.GeoJSON``、``ol.source.KML``、``ol.source.TopoJSON``など、ベクタフォーマットの読み込みに適したソースを使用する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Note, in the previous code we must change the ``url_to_file`` to point to a valid GeoJSON file placed in our server.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>前のコードでは、サーバに置かれた有効なGeoJSONファイルを指すように``url_to_file``を変更する必要があることに注意してください。Javascriptセキュリティでは、異なるドメイン/ポート上の外部URLからデータセットを取得することができないことに注意してください。(aka.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Note that Javascript security will prevent sourcing of datasets from an external URL on a different domain / port (a.k.a. same-origin policy).</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>同一発信元ポリシー)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Features can also be created manually. In this case we need to create a geometry that represents the feature:</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>フィーチャーは手動で作成することもできます。この場合、フィーチャーを表すジオメトリを作成する必要があります。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Apply style to features</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>フィーチャにスタイルを適用する</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Features within vector layers can be styled. The style is determined by a combination of fill, stroke, text  and image, which are all optional. In addition, a style can be applied to a layer, which determines the style of all contained features, or to an individual feature.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>ベクタレイヤ内のフィーチャにスタイルを設定できます。スタイルは、塗り、線、テキスト、イメージの組み合わせによって決まります。これらはすべて任意の設定項目です。さらに、レイヤにスタイルを適用して、含まれているすべてのフィーチャのスタイルを決定したり、個々のフィーチャにスタイルを適用することもできます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>A style is represented by the ``ol.style.Style`` class which has properties to set the ``fill``, ``stroke``, ``text`` and ``image`` to be applied. The next example shows the World's administrative limits dataset styled to use a green fill and stroke:</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>スタイルは、``ol.style.Style``クラスによって表され、このクラスは、適用される``fill``、``stroke``、``text``および``image``を設定するプロパティを有する。次の例は、緑の塗りと線を使用するようにスタイル設定された世界の行政区界データセットを示しています。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>In the code, we have loaded a TopoJSON file and styled it through the ``style`` property. We have set a ``fill`` and ``stroke``, required for lines and polygons, and an ``image`` (in this case a circle) used for point features.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>このコードでは、TopoJSONファイルをロードし、``style``プロパティーを使ってスタイルを設定しています。ラインとポリゴンに必要な``fill``と``stroke``、およびポイントフィーチャに使用する``image``(この場合は円)を設定しました。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Work with events</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>イベントの操作</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Most of the components, like map, layers or controls, trigger events to notify changes. For example we can be notified each time the mouse is moved over the map, or when a feature is added to a vector layer, etc.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>ほとんどの(マップ、レイヤ、コントロールなどの)要素は、イベントをトリガして変更を通知します。たとえば、マウスがマップ上を移動するたびに通知されたり、フィーチャがベクタレイヤに追加されるたびに通知されたりします。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Events can be easily registered on an object with the ``on()`` method and unregistered with ``un()``.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>イベントは``on()``メソッドでオブジェクトに簡単に登録でき、``un()``で登録解除できます。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>The following code registers an event on a map instance, and will be notified each time the pointer is moved. Within the callback function we obtain the pointer coordinates and print in the browser console in two different projections.</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>次のコードでは、マップのインスタンスにイベントを登録し、ポインタが移動するたびに通知されます。コールバック関数内では、ポインタの座標を取得し、ブラウザコンソールに2つの異なる投影法で出力します。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>What next?</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>次のステップ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>Sometimes the quickest way to work out how OpenLayers works is to look at examples and their source code. You can find more OpenLayers information here:</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>OpenLayersの動作を理解するための最も簡単な方法は、サンプルとそのソースコードを調べることです。OpenLayersの詳細については、以下を参照してください。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`API Docs &lt;../../openlayers/apidoc/&gt;`_</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>`APIドキュメント &lt;../../openlayers/apidoc/&gt;`_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`Examples &lt;../../openlayers/examples/&gt;`_</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>`例 &lt;../../openlayers/examples/&gt;`_</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="en">
        <seg>`OpenLayers.org Website &lt;https://openlayers.org/&gt;`_</seg>
      </tuv>
      <tuv xml:lang="ja">
        <seg>`OpenLayers.org Webサイト &lt;https://openlayers.org/&gt;`_</seg>
      </tuv>
    </tu>
  </body>
</tmx>
